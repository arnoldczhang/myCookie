
/******************************contents**********************************
*RANDOM
*******************
*ELEMENT/STYLE
*******************
*CLASS
*******************
*CHECK
*******************
*EVENT
*******************
*COOKIE
*******************
*VALUE/TEXT
*******************
*DATE
*******************
*MAP
*******************
*JSON
*******************
\U000000
*******************
@标注
*******************
设计模式
*******************
排序
*******************
前端
*******************
html表达式
*******************
调用javascript
*******************
js变量解析顺序
***********************************************************************/


/**
**	-----------------------RANDOM-------------------------------------- 1
**/
var GetRandomNum = function(mainNum,viceNum) {
	var random = mainNum + Math.random() * viceNum;
	return random;
};
var GetRandomInt = function(mainNum,viceNum) {
	var random = parseInt(mainNum + Math.random() * viceNum);
	return random;
};
var GetRandomColor = function() {
	var r, g, b;
	r = GetRandomInt(0, 255);
	g = GetRandomInt(0, 255);
	b = GetRandomInt(0, 255);
	return 'rgb(' + r + ',' + g + ',' + b + ')';
};
/**
**-----------------------ELEMENT/STYLE---------------------------------- 2
**/
var GetElemId = function(id) {
	var myID = document.getElementById(id);
	return myID;
};
var GetElemClass = function(className) {
	var myCLASS = document.getElementsByClassName(className);
	return myCLASS;
};
var GetElemTag = function(tag) {
	var myTAG = document.getElementsByTagName(tag);
	return myTAG;
};
var GetElemStyleId = function(id) {
	var myIdStyle = id.style;
	return myIdStyle;
};
/**
**----------------------------CLASS------------------------------------ 3
**/
var HasClass = function(id, cls) {  
	var obj = document.getElementById(id);
	return obj.className.match(new RegExp('(\\s|^)' + cls + '(\\s|$)'));  
};
var AddClass = function(id, cls) {
	var obj = document.getElementById(id);
	if (!this.hasClass(obj, cls)) obj.className += " " + cls;  
};
var RemoveClass = function(id, cls) {  
	var obj = document.getElementById(id);
	if (hasClass(obj, cls)) {  
		var reg = new RegExp('(\\s|^)' + cls + '(\\s|$)');  
		obj.className = obj.className.replace(reg, ' ');  
	}  
};    
var ToggleClass = function(id,cls){  
	var obj = document.getElementById(id);
	if(hasClass(obj,cls)){  
		RemoveClass(id, cls);  
	}else{  
		AddClass(id, cls);  
	}  
};  	
/**
**	-------------------------CHECK------------------------------------- 4
**/
var CheckChinese = function(id, placeId, accordCls, unaccordCls) {
	var target = document.getElementById(id),
		  place = document.getElementById(placeId),
		  temp;
	if (target.value) {
		if (escape(target.value).indexOf("%u") < 0) { 
			place.innerHTML = "";
			place.className = accordCls;
			temp = 1;
		}else {
			place.innerHTML = "对不起，不可包含汉字";
			place.className = unaccordCls;
			temp = 0;
		}
	}else {
		place.innerHTML = "";
		temp = 0;
	}	
	return temp;
};
var CheckEmail = function(id, placeId, accordCls, unaccordCls) {
	var temp,
		  value = document.getElementById(id).value,
		  place = document.getElementById(placeId),
	  	  regex = /^([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+\.[a-zA-Z]{2,3}$/g;
	 if (regex.test(value)) {
		 place.innerHTML = "符合邮箱格式";
		 place.className = accordCls;
		 temp = 1;
	 }else {
		if(value) {
			place.innerHTML = "不符合邮箱格式";
			place.className = unaccordCls;		
		}else {
			place.innerHTML = "";
		}
		temp = 0;
	 }
	 return temp;
};
var CheckPostCode = function(id, placeId, accordCls, unaccordCls) {
	var temp,
		  value = document.getElementById(id).value,
		  place = document.getElementById(placeId),
	  	  regex = /^[0-9]{6}$/g;
	 if (regex.test(value)) {
		 place.innerHTML = "符合邮编格式";
		 place.className = accordCls;
		 temp = 1;
	 }else {
		if(value) {
			 place.innerHTML = "不符合邮编格式";
			 place.className = unaccordCls;
		}else {
			place.innerHTML = "";
		}
		 temp = 0;
	 }
	 return temp;
};
var CheckNumber = function(id, i, j, placeId, accordCls, unaccordCls) {
	var temp,
		  value = document.getElementById(id).value,
		  place = document.getElementById(placeId),
	  	  regex =new RegExp("^\[0-9]{" + i + "," + j + "}$","g");
	 if (regex.test(value)) {
		 place.innerHTML = "";
		 place.className = accordCls;
		 temp = 1;
	 }else {
		if (value) {
			 place.innerHTML = "格式不符合";
			 place.className = unaccordCls;
		}else {
			place.innerHTML = "";
		}
		 temp = 0;
	 }
	 return temp;
};
var CheckMobile = function(id, placeId, accordCls, unaccordCls) {
	var temp,
		  value = document.getElementById(id).value,
		  place = document.getElementById(placeId),
	  	  regex = /^((\(\d{3}\))|(\d{3}\-))?13[0-9]\d{8}|15[0-9]\d{8}|18[0-9]\d{8}$/g;
	 if (regex.test(value)) {
		 place.innerHTML = "符合手机格式";
		 place.className = accordCls;
		 temp = 1;
	 }else {
		if (value) {
			 place.innerHTML = "不符合手机格式";
			 place.className = unaccordCls;
		}else {
			 place.innerHTML = "";
		}
		 temp = 0;
	 }
	 return temp;
};
var CheckLength = function(id, placeId, minLength, maxLength, accordCls, unaccordCls) {
	var temp,
		  len = document.getElementById(id).value.length,
		  place = document.getElementById(placeId);
	if (len >= minLength && len <= maxLength) {
		place.innerHTML = "字数符合";
		place.className = accordCls;
		temp = 1;
	}else if (len < minLength && len){
		place.innerHTML = "字数太少，还需" + (minLength - len) + "个字";
		place.className = unaccordCls;
		temp = 0;
	}else if (len > maxLength) {
		place.innerHTML = "字数太多，超出" + (len - maxLength) + "个字";
		place.className = unaccordCls;
		temp = 0;
	}else {
		temp = 0;
	}
	return temp;
};
var CheckTheSame = function(targetId, targetId2, placeId) {
	var temp,
		  value1 = document.getElementById(targetId).value,
		  value2 = document.getElementById(targetId2).value,
		  place = document.getElementById(placeId);
	if (value1 === value2 && value1 && value2) {
		place.innerHTML = "内容一致";
		temp = 1;
	}else if (value1 && value2){
		place.innerHTML = "内容不一致";
		temp = 0;
	}
	return temp;
};
/**
**---------------------------EVENT-----------------------------------5
**/
var AddEvent = function(id, handler, fn) {
	var target = document.getElementById(id);
	if (window.attachEvent) {
		target.attachEvent("on" + handler, fn);
	}else if (window.addEventListener){
		target.addEventListener(handler, fn, false);
	}else {
		target["on" + handler] = fn;
	}
};
var OnPropertyChange = function(id, fn) {
	var target = document.getElementById(id);
	if ('\v' === 'v') {
		target.onpropertychange = fn; 
	}else {
		target.addEventListener('input', fn, false);
	}
};
var OnKeyChange = function(id, fn) {
	var target = document.getElementById(id);
	if ('\v' === 'v') {
		target.attachEvent('onkeydown', fn);
	}else {
		target.addEventListener('keydown', fn, false);
	}
};
var OnChange = function(id, fn, fn2) {
	var target = document.getElementById(id);
	if ('\v' === 'v') {
		target.onpropertychange = fn; 
		target.attachEvent('onkeydown', fn2);
	}else {
		target.addEventListener('input', fn, false);
		target.addEventListener('keydown', fn2, false);
	}
};
/**
**-----------------------------COOKIE----------------------------------6
**/
var SetCookie = function(name,value) {
    var Days = 0.1; 
    var exp  = new Date();    
    exp.setTime(exp.getTime() + Days*24*60*60*1000);
    document.cookie = name + 
			"="+ escape (value) + 
			";expires=" + 
			exp.toGMTString();
};
var GetCookie = function(name) {
    var arr = document.cookie.match(new RegExp("(^| )"+name+"=([^;]*)(;|$)"));
     if (arr != null) {
		return unescape(arr[2]); 
	}
	return null;

};
var DelCookie = function(name) {
    var exp = new Date();
    exp.setTime(exp.getTime() - 1);
    var cval = GetCookie(name);
    if (cval != null) {
		document.cookie = name + 
				"=" + cval + 
				";expires="+ 
				exp.toGMTString();
	}
};
/**
**----------------------------VALUE/TEXT-------------------------------------7
**/
var GetVal = function(id) {
	var target = document.getElementById(id),
		  value = target.value;
	return value;
};
var SetVal = function(id, val) {
	var target = document.getElementById(id);
	target.value = val;
};
var GetText = function(id) {
	var target = document.getElementById(id),
		  value = target.innerHTML;
	return value;
};
var SetText = function(id, text) {
	var target = document.getElementById(id);
	target.innerHTML = text;
};
/**
**----------------------------DATE-------------------------------------8
**/
var getStartDate = function(dayTip) {
	var PERDAY = 24 * 60 * 60 * 1000,
		  WEEK = 7,
		  MONTH = 30,
		  HALFYEAR = 182,
		  YEAR = 365;
	var date;
	var startYear, startMonth, startDay;
	var endDate = new Date();
	switch(dayTip) {
		case "seven" :
			date = new Date(endDate - WEEK * PERDAY);
			break;
		case "one_month" :
			date = new Date(endDate - MONTH * PERDAY);
			break;
		case "three_month" :
			date = new Date(endDate - 3 * MONTH * PERDAY);
			break;
		case "six_month" :
			date = new Date(endDate - HALFYEAR * PERDAY);
			break;
		case "year" :
			date = new Date(endDate - YEAR * PERDAY);
			break;
	}
	startDate = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();
	return startDate;
};
var getDayOfYear = function(year, month, day) {

	var dateArr, 
		  resultDay = 0;
	if ((year % 4 === 0 && year % 100 != 0) || year % 400 === 0) {
		dateArr = new Array(31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
	}else {
		dateArr = new Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
	}
	
	if (month < 0 || month > 12) {
		return false;
	}
	
	if (day < 0 || day > 31 || day > dateArr[month - 1]) {
		return false;
	}
	
	for (var i = 0; i < month; i += 1) {
		resultDay += dateArr[i];
	}
	resultDay += day;
	return resultDay;
};
/**
**----------------------------MAP-------------------------------------9
**/
function Map() {
   
    var struct = function(key, value) {
        this.key = key;
        this.value = value;
    };
 
    var put = function(key, value) {
        for ( var i = 0; i < this.arr.length; i++) {
            if (this.arr[i].key === key) {
                this.arr[i].value = value;
                return;
            }
        }
        this.arr[this.arr.length] = new struct(key, value);
    };
     
 
    var get = function(key) {
        for ( var i = 0; i < this.arr.length; i++) {
            if (this.arr[i].key === key) {
                return this.arr[i].value;
            }
        }
        return null;
    };
 
    var remove = function(key) {
        var v;
        for ( var i = 0; i < this.arr.length; i++) {
            v = this.arr.pop();
            if (v.key === key) {
                continue;
            }
            this.arr.unshift(v);
        }
    };
 
    var size = function() {
        return this.arr.length;
    };
 
    var isEmpty = function() {
        return this.arr.length <= 0;
    };
 
    this.arr = new Array();
    this.get = get;
    this.put = put;
    this.remove = remove;
    this.size = size;
    this.isEmpty = isEmpty;
}
/**
**比如：
var projStatus = {
	"b0" : "新建0",
	"b1" : "新建1",
	"b2" : "新建2",
	"b3" : "新建3",
	"b4" : "新建4",
	"b5" : "新建5",
	"b6" : "新建6",
	"b7" : "新建7",
	"b8" : "新建8",
};
var value = "b1";
projStatus[value];
**/
例：
	var child = {};
	child["a"] = 1;
	child["b"] = 2;
	child["c"] = 3;
	function a1(val) {
		if (child.hasOwnProperty(val)) {
			return child[val];
		};
	};
	a1["d"];	//false
/**
**----------------------------JSON-------------------------------------10
**/
var info = {
	"arrayList" :[
		{"name" : "zhangSan", "sex" : "male"},
		{"name" : "liSi", "sex" : "female"}
	],
	"arrayList2" :[
		{"name" : "wangWu", "sex" : "male"},
		{"name" : "liuLiu", "sex" : "female"}
	],
};
console.log(info.arrayList[0].name);
/**
**----------------------------\u000000-----------------------------------11
**/
var UnicodeToChinese = function(uStr) {
	var cStr=unescape(uStr.replace(/\\u/g,'%u'));
	return cStr;
};
var ChineseToUnicode = function(cStr) {
	var uStr = cStr.replace(/[^\u0000-\u00FF]/g,function($0){return escape($0).replace(/(%u)(\w{4})/gi,"&#x$2;")});
	uStr = uStr.replace(/;/g,'');
	uStr = uStr.replace(/&#x/g,'\\u');
	return uStr;
};
/**
**----------------------------@标注--------------------------------12
**Spring MVC,Spring Container,Spring Reactor
**/
@Component:可装载组件  
@Repository:持久层组件  
@Service:服务层组件  
@Controller:控制层组件 



***@Transactional***
添加@Transactional到某个Service类上，说明该Service的所有方法
都支持事务管理，若在某个方法上添加@Transactional，只声明该方
法支持事务。当支持事务的方法开始执行前都会先打开一个事务，碰
到异常时就会回滚。Spring的默认配置是碰到RunTimeException时才
会进行事务回滚。



***@RequestMapping***
RequestMapping注解有六个属性，下面我们把她分成三类进行说明:
1.value, method;
value：指定请求的实际地址uri，指定的地址可以是URI Template 模式；
			value的uri值为以下三类：
			A) 可以指定为普通的具体值；						value="/newDay"
			B)  可以指定为含有某变量的一类值；			value="/newDay/{day}"或value="/{day}"
			C) 可以指定为含正则表达式的一类值；			value="/newDay/{symbolicName:[a-z-]+}-{version:\d\.\d\.\d}.{extension:\.[a-z]}"
method：指定请求的method类型， GET、POST、PUT、DELETE等；

例：@RequestMapping(value="/day", method = RequestMethod.GET)  

		@RequestMapping(value="/{day}", method = RequestMethod.GET)  
		public Map getForDay(@PathVariable @DateTimeFormat(iso=ISO.DATE) Date day, Model model) {  
		return appointmentBook.getAppointmentsForDay(day);  
		}  

		@RequestMapping(value="/owners/{ownerId}", method=RequestMethod.GET) 
		public String findOwner(@PathVariable String ownerId, Model model) {  
		  Owner owner = ownerService.findOwner(ownerId);    
		  model.addAttribute("owner", owner);    
		  return "displayOwner";   
		}  

		@RequestMapping("/spring-web/{symbolicName:[a-z-]+}-{version:\d\.\d\.\d}.{extension:\.[a-z]}")  
		public void handle(@PathVariable String version, @PathVariable String extension) {      
		// ...  
		}  

		@RequestMapping(method = RequestMethod.POST)  
		public String add(@Valid AppointmentForm appointment, BindingResult result) {  
			if (result.hasErrors()) {  
				return "appointments/new";  
			}  
			appointmentBook.addAppointment(appointment);  
			return "redirect:/appointments";  
		}  
		
2. consumes,produces;
consumes：指定处理请求的提交内容类型（Content-Type），例如application/json, text/html;
produces:   指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；

例：//方法仅处理request Content-Type为“application/json”类型的请求。
		@Controller  
		@RequestMapping(value = "/pets", method = RequestMethod.POST, consumes="application/json")  
		public void addPet(@RequestBody Pet pet, Model model) {      
			... 
		}  
		
		//方法仅处理request请求中Accept头中包含了"application/json"的请求，同时暗示了返回的内容类型为application/json;
		@Controller  
		@RequestMapping(value = "/pets/{petId}", method = RequestMethod.GET, produces="application/json")  
		@ResponseBody  
		public Pet getPet(@PathVariable String petId, Model model) {      
			...
		}  
		
3. params,headers;
params：指定request中必须包含某些参数值是，才让该方法处理。
headers：指定request中必须包含某些指定的header值，才能让该方法处理请求。

例：@Controller  
		@RequestMapping("/owners/{ownerId}")  
		public class RelativePathUriTemplateController {  
		  
			  // 仅处理请求中包含了名为“myParam”，值为“myValue”的请求；
			  @RequestMapping(value = "/pets/{petId}", method = RequestMethod.GET, params="myParam=myValue")  
			  public void findPet(@PathVariable String ownerId, @PathVariable String petId, Model model) {      
				...  
			  }  
		}  
		
		@Controller  
		@RequestMapping("/owners/{ownerId}")  
		public class RelativePathUriTemplateController {  
			
			//仅处理request的header中包含了指定“Refer”请求头和对应值为“http://www.ifeng.com/”的请求；
			@RequestMapping(value = "/pets", method = RequestMethod.GET, headers="Referer=http://www.ifeng.com/")  
			  public void findPet(@PathVariable String ownerId, @PathVariable String petId, Model model) {      
				...
			  }  
		}  

		
		
***@RequestParam***
A) 常用来处理简单类型的绑定，通过Request.getParameter() 获取的String可直接转换为简单类型的情况
	（ String--> 简单类型的转换操作由ConversionService配置的转换器来完成）；
	因为使用request.getParameter()方式获取参数，所以可以处理get 方式中queryString的值，
	也可以处理post方式中 body data的值；
B) 用来处理Content-Type: 为 application/x-www-form-urlencoded编码的内容，
	提交方式GET、POST；
C) 该注解有两个属性： value、required； value用来指定要传入值的id名称，
	required用来指示参数是否必须绑定；	
D)@RequestParam绑定单个请求参数值，作用于单个参数，而不是对象
例：@Controller  
		@RequestMapping("/pets")  
		@SessionAttributes("pet")  
		public class EditPetForm {  
		  
			//如果参数名不能和变量保持一致，则用RequestParam强制绑定
			@RequestMapping(method = RequestMethod.GET)  
			public String setupForm(@RequestParam("petId") int petId, ModelMap model) {  
				Pet pet = this.clinic.loadPet(petId);  
				model.addAttribute("pet", pet);  
				return "petForm";  
			}  	
			
			@RequestMapping(method = RequestMethod.GET)  
			public String setupForm(@RequestParam int petId, @RequestParam String username, ModelMap model) {  
				Pet pet = this.clinic.loadPet(petId);  
				model.addAttribute("pet", pet);  
				return "petForm";  
			} 
			
			@RequestMapping("/addHouse.do")
			public String addHouse(
			@RequestParam(value ="companyId", required = true) int companyId ,
			@RequestParam(value ="pics", required = false) CommonsMultipartFile pics ,
			HttpServletRequest request,HttpServletResponse response, ModelMap model){
				...
			}
}		
		
		
		
***@ResponseBody***
A)	将内容或对象作为 HTTP 响应正文返回，即不需要VIEW展现层模块，直接显示到客户端的内容。
B)		POST模式下，使用@RequestBody绑定请求对象
例：@RequestMapping(value="/search", method=RequestMethod.POST)
		public @ResponseBody ModelAndView search(@Valid C c, BindingResult bindingResult, 
				@RequestParam(defaultValue="1") int page) {
			...
		}
		
		

***@Valid***
1、将页面传过来的对象信息封装到指定pojo类中，可使用getter/setter取到值，
	  当然，pojo类要准备好；
2、定递归验证关联的对象；如用户对象中有个地址对象属性，
	  如果想在验证用户对象时一起验证地址对象的话，
	  在地址对象上加@Valid注解即可级联验证。
例：@Transactional
		@RequestMapping(value = "/transOutQuery", method=RequestMethod.GET)
		@PreAuthorize("isAuthenticated()")
		public @ResponseBody ModelAndView transOutQuery(@AuthenticationPrincipal WebUser user , 
				@Valid ProjSearchInfo searchInfo ,BindingResult bindingResult) {
			...
		}



***@PersistenceContext***
private EntityManager em;
注入的是实体管理器，执行持久化操作的，需要配置文件persistence.xml。
针对实体类的不同状态(四种,managedh或detached等)，
可以做出不同的反应(merge,persist等等)，其实就是把数据从数据库里提出，
然后在内存里处理的，再返回数据库的法则。



***@Resource***
是注入容器提供的资源对象，比如SessionContext MessageDrivenContext。
或者你那个name指定的JNDI对象，基本上就是告诉程序数据库在哪里



***@Autowired***
spring可以自动帮你把bean里面引用的对象的setter/getter方法省略，
它会自动帮你set/get。



***@Session***
如果想将某个ModelMap中的参数指定到Session中，可以使用@SessionAttributes注解
例：@Controller  
		@RequestMapping("/account.do")  
		@SessionAttributes("msg")  
		public class AccountController {  
		  
			@Autowired  
			private AccountService accountService;  
		  
			@SuppressWarnings("unchecked")  
			@RequestMapping(method = RequestMethod.GET)  
			public Map hello(String username, String password, ModelMap model) {  
		  
				System.out.println(accountService.verify(username, password));  
		  
				model.put("msg", username);  
				return model;  
			}  
		  
		}  
		
	
	
***@SuppressWarnings***
对被批注的代码元素内部的某些警告保持静默。
例：	
	@SuppressWarnings("serial")
	public class WebUser extends User {
		
	}
	
	
	
***@PreAuthorize***
权限验证
例：
	@Transactional
	@PreAuthorize("hasRole('ROLE_ADMIN')")
	public void removeContact(Integer id) {
	  contactDAO.removeContact(id);
	}
	
	
	
***@PathVariable***
获取URL访问路径变量。
例：
		访问路径是/company/techferry，companyName获取到的值就是techferry。
		@Controller
		@RequestMapping("/company")
		public class CompanyController {
			  @Autowired
			  private CompanyService companyService;
			  @RequestMapping("{companyName}")
			  public String getCompany(Map<String, Object> map, @PathVariable String companyName) {
					Company company = companyService.findByName(companyName);
					map.put("company", company);
					return "company";
			  }
			  ...
		}
		
		

***@AuthenticationPrincipal***
用户认证
@AuthenticationPrincipal WebUser user
@SuppressWarnings("serial")
public class WebUser extends User {

	private Integer userId;
	private String name;
	private String realname;

	public WebUser(Integer userId, String username, String password,
			boolean isLocked,
			Collection<? extends GrantedAuthority> authorities) {
		super(username, password, true, true, true, !isLocked,authorities);//账户锁定字段默认是false，所以这里添加了！运算符
		this.name = username;
		this.userId = userId;
	}

	public void setUserId(Integer userId) {
		this.userId = userId;
	}
	
	public Integer getUserId() {
		return userId;
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getRealname() {
		return realname;
	}

	public void setRealname(String realname) {
		this.realname = realname;
	}
}




/**
**----------------------------设计模式-----------------------------------13
**/

//工厂

var XMLHttpFactory = function() {};
XMLHttpFactory.createXMLHttp = function() {
	var XMLHttp = null;
	if (window.XMLHttpRequest) {
		XMLHttp = new XMLHttpRequest();
	}else if (window.ActiveXObject) {
		XMLHttp = new ActiveXObject("Microsoft.XMLHTTP");
	}
	return XMLHttp;
};
var AjaxHandler = function() {
	var XMLHttp = XMLHttpFactory.createXMLHttp();
	...
};

//桥梁
//桥梁模式可以用来弱化它与使用它的类和对象之间的耦合，就是将抽象与其实现隔离开来

function getBeerById(id, callBack) {
	asyncRequest("GET", "beer.url?id=" + id, function(resp) {
		callBack(resp.responseText)
	});
};
function getBeerByIdBridge(e) {
	getBeerById(this.id, function(beer) {
		...
	});
}
addEvent(element, "click", getBeerByIdBridge);

//装饰者

var myText = {};
myText.Decoration = {};
myText.Core = function(str) {
	this.show = function() {
		...
	}
};
myText.Decoration.addMark = function(str) {
	this.show = function() {
		...
	}
};
myText.Decoration.addItalic = function(str) {
	this.show = function() {
		...
	}
};

//门面

_myModel.util.Event = {
	getEvent : function(e) {
		return e || window.event;
	},
	getTarget : function(e) {
		return e.target || e.srcElement;
	},
	preventDefault : function(e) {
		if (e.preventDefault) {
			e.preventDefault();
		}else {
			e.returnValue = false;
		}
	}
};
addEvent("dd", "click", function(e) {
	_myModel.util.Event.getTarget(e);
});

//代理

var PublicLibrary = function(books) {
	...
};
PublicLibrary.prototype = {
	findBooks : funciton(searchStr) {
		...
	},
	checkoutBook : function(book) {
		...
	},
	returnBook : function(book) {
		...
	}
};
var PublicLibraryProxy = function(catalog) {
	this.library = new PubliLibrary(catalog);
};
PublicLibraryProxy.prototype = {
	findBooks : function(searchStr) {
		return this.library.findBooks(searchStr);
	},
	checkoutBook : function(book) {
		return this.library.checkoutBook(book);
	},
	returnBook : function(book) {
		return this.library.returnBook(book);
	}
};

//观察者

var fn1 = function() {
	...
};
var fn2 = function() {
	...
};
addEvent(element, "click", fn1);
addEvent(element, "click", fn2);
/**
**----------------------------排序-----------------------------------14
**/

//冒泡

window.onload = function() {
	var TEMP;
	var isChanged;
	var arrNum;
	var arr = new Array(10);
	var TIMES = arr.length;
	for (var k = 0; k < TIMES; k += 1) {
		arrNum = ~~(Math.random() * 100);
		arr[k] = arrNum;
	}
	
	for (var j = TIMES; j > 0; j -= 1) {
		isChanged = false;
		for (var i = 0; i < j - 1; i += 1) {
			if (arr[i] > arr[i + 1]) {
				TEMP = arr[i];
				arr[i] = arr[i + 1];
				arr[i + 1] = TEMP;
				isChanged = true;
			}
		}		
		if (!isChanged) {
			break;
		}
		console.log(arr);		
	}
	
};

//


/**
**----------------------------前端-----------------------------------15
**/

重绘：
	当在页面上修改了一些不需要改变定位的样式的时候（比如background-color,border-color,visibility)，
	浏览器只会将新的样式重新绘制给元素（这就叫一次“重绘”或者“重新定义样式”）。

重排：
	当页面上的改变影响了文档内容、结构或者元素定位时，就会发生重排（或称“重新布局”）。
	重排通常由以下改变触发：
	1、DOM 操作（如元素增、删、改或者改变元素顺序）。
	2、内容的改变，包括 Form 表单中文字的变化。
	3、计算或改变 CSS 属性。
	4、增加或删除一个样式表。
	5、改变”class”属性。
	6、浏览器窗口的操作（改变大小、滚动窗口）。
	7、激活伪类（如:hover状态）。

强制重排（给元素改变同一个属性两次，却没有看到变化过程）：
	例：
	$(this).removeClass('has-transition');
	// 改变元素属性
	$(this).css('margin-left', 100);
	//触发一次强制重排，从而使变化了的class或属性能够立即执行。
	$(this)[0].offsetHeight; // offsetHeight仅仅是个例子，其他的属性也可以奏效。
	// 再将包含transition的class添加回来
	$(this).addClass('has-transition');
	// 改变元素属性
	$(this).css('margin-left', 50);

CSS 选择器的性能排行（从最快的开始）：
	1、ID选择器：#id
	2、class选择器： .class
	3、标签: div
	4、相邻的兄弟元素：a + i
	5、父元素选择器： ul > li
	6、通配符选择器： *
	7、伪类和伪元素： a:hover ，（你应该记住浏览器处理选择器是从右向左的，
	这也就是为什么最右面的选择器会更快——#id或.class）。

实际的优化建议：
	1、尽可能的减少 DOM 的操作。把所有东西都缓存起来，
	包括属性和对象（如果它可被重复使用）。进行复杂的
	操作的时候，最好操作一个“离线”的元素（“离线”元素的
	意思是与 DOM 对象分开、仅存在内存中的元素），
	然后将这个元素插入到 DOM 中。
	2、如果你使用 jQuery，遵循jQuery 选择器最佳实践
	3、要改变元素的样式，修改“class”属性是最高效的方式之一。
	你要改变 DOM 树的层次越深，这一条就越高效（这也有助于将表现和逻辑分开）。
	4、尽可能的只对 position 为 absolute 或 fix 的元素做动画。因为一个 position 为
	 absolue 或 fixed 的元素的大小变化只影响它自身和子孙元素，而对一个 position 为 
	 static 的元素做同样的操作就会引起所有它后面元素的重排。
	5、当滚动时禁用一些复杂的 :hover 动画是一个很好的主意
	（例如，给 body 标签加一个 no-hover 的 class）关于这个主题的文章。


/**
**----------------------------html表达式-----------------------------------16
**/	

格式：
	<!--[if expression]> HTML <![endif]-->

操作符：
	[if IE]   判断是否IE
	[if IE 7]  判断是否是IE7
	[if !IE]  判断是否不是IE
	[if lt IE 5.5]  判断是否是IE5.5 以下版本。  (<)
	[if lte IE 6]   判断是否等于IE6 版本或者以下 (<=)
	[if gt IE 5]  判断是否IE5以上版本  （> ）
	[if gte IE 7]  判断是否 IE7 版本或者以上
	[if !(IE 7)] 判断是否不是IE7
	[if (gt IE 5)&(lt IE 7)]   判断是否大于IE5， 小于IE7
	[if (IE 6)|(IE 7)]  判断是否IE6 或者 IE7

注意：
	1、ie5下不支持；
	2、有人会试图使用<!--[if !IE]>来定义非IE浏览器下的状况，
		但注意：条件注释只有在IE浏览器下才能执行，这个代码
		在非IE浏览下非单不是执行该条件下的定义，而是当做注
		释视而不见。
	
例子：
	<!--[if IE]><p>You are using Internet Explorer.</p><![endif]-->  
	<![if !IE]><p>You are not using Internet Explorer.</p><![endif]>  
	<!--[if IE 7]><p>Welcome to Internet Explorer 7!</p><![endif]-->  

普通的用法：
	<link rel="stylesheet" type="text/css" href="moz.css" />
	<!--[if IE 7]>
	<link rel="stylesheet" type="text/css" href="ie7.css" />
	<![endif]-->

解释：
	如上例，moz.css是默认的CSS样式，应该位于HTML文档的首行，
	进行条件注释判断的所有内容必须位于该默认样式之后。

/**
**----------------------------调用javascript-----------------------------------17
**/	
方法一改变src：
	<script id="external_script" type="text/JavaScript"></script>
	<script>
		document.getElementById('external_script').src = 'http://cross.domain.com/other.js';
	</script>

方法二document.write：
	<script>
		document.write('<script src="', 'http://cross.domain.com/other.js', '" type="text/JavaScript"><\/script>');
	</script>

如何处理大块js？：分成许多小块，把他们连起来，setTimeout依次执行
	function doSomething (callbackFn) {

		// 初始化
		(function () {
			if (termination condition) {
				callbackFn();
			} else {
				setTimeout(arguments.callee, 0);
			}
		})();
	};

如何减少事件处理？：使用事件代理，利用事件冒泡
例：

	<div id="container">
		  <ul>
				<li id="li-1">List Item 1</li>
				<li id="li-2">List Item 2</li>
				<li id="li-3">List Item 3</li>
				<li id="li-4">List Item 4</li>
				<li id="li-5">List Item 5</li>
		  </ul>
	</div>

	AddEvent("container", "click", function(e) {
		//获取对象！！！！！
		var el = e.srcElement ? e.srcElement : e.target;
		if (el.nodeName.toUpperCase() === "LI") {
			
			//do something
		}
	});
	
	

/**
**----------------------------js变量解析顺序-----------------------------------18
**/
1.Language-defined: All scopes are, by default, given the names this and arguments.
2.Formal parameters: Functions can have named formal parameters, which are scoped to the body of that function.
3.Function declarations: These are of the form function foo() {}.
4.Variable declarations: These take the form var foo;.
/**
**----------------------------xxxxxx-----------------------------------18
**/

//字符串操作
myArray.push(value);
myArray[myArray.length] = value;
myArray[idx++] = value;

//效率append
var dd = document.getElementById("dd");
var obj = "";
window.onload = function() {
	var str = "<input type='text' class='input' /><br />";
	for (var i = 0; i < 100; i += 1) {
		obj += str;
	}
	dd.innerHTML += obj;
};

//动态创建标签
var e = "header,span,footer".split(","), i = e.length;
while(i--) document.createElement(e[i]);

//安全码加密
private PasswordEncoder passwordEncoder = new ShaPasswordEncoder(256);
String hashedPassword = passwordEncoder.encodePassword(password, username);
//data属性
<div id="cc" class="cmt0 pngfix skrollable skrollable-before" data-19500="opacity:0;" data-19000="opacity:1;" data-18500="opacity:0;" style="height:100px;width:100px;background-color:black;float:right;position:relative;"></div>
var rxKeyframeAttribute = /^data(?:-(_\w+))?(?:-?(-?\d*\.?\d+p?))?(?:-?(start|end|top|center|bottom))?(?:-?(top|center|bottom))?$/;
for (var i = 0; i < attrLength; i += 1) {
	var attr = dd.attributes[i];
	var props = attr.value;
	var nm = props.split(":")[0];
	var value = props.split(":")[1];
	var match = attr.name.match(rxKeyframeAttribute);
}
//a标签打开新的选项卡而不是页面直接跳转
<a href="..." target="_blank" >dddd</a>
//自执行立即调用方法（内部声明的变量是局部变量）
(function dd() {
	console.log("dd");
}());
//设置标签栏图标
<link href="res/images/logo.jpg" rel="shortcut icon" />
//
$("#progressInvest").html(projDetail.progressInvest+"%");
			$(".huge_progress_actual").animate({"width": "0%"},200);
			setTimeout(function() {
				$(".huge_progress_actual").css("width", projDetail.progressInvest+"%");
			}, 500);		
//金额转大写
function numToCny(num){     
    var capUnit = ['万','亿','万','圆',''];     
    var capDigit = { 2:['角','分',''], 4:['仟','佰','拾','']};     
    var capNum=['零','壹','贰','叁','肆','伍','陆','柒','捌','玖'];     
    if (((num.toString()).indexOf('.') > 16)||(isNaN(num)))      
        return '';     
    num = ((Math.round(num*100)).toString()).split('.');  
 num = (num[0]).substring(0, (num[0]).length-2)+'.'+ (num[0]).substring((num[0]).length-2,(num[0]).length);  
    num =((Math.pow(10,19-num.length)).toString()).substring(1)+num;     
    var i,ret,j,nodeNum,k,subret,len,subChr,CurChr=[];     
    for (i=0,ret='';i<5;i++,j=i*4+Math.floor(i/4)){     
        nodeNum=num.substring(j,j+4);     
        for(k=0,subret='',len=nodeNum.length;((k<len) && (parseInt(nodeNum.substring(k),10)!=0));k++){     
            CurChr[k%2] = capNum[nodeNum.charAt(k)]+((nodeNum.charAt(k)==0)?'':capDigit[len][k]);     
            if (!((CurChr[0]==CurChr[1]) && (CurChr[0]==capNum[0])))     
                if(!((CurChr[k%2] == capNum[0]) && (subret=='') && (ret=='')))     
                    subret += CurChr[k%2];     
        }     
        subChr = subret + ((subret=='')?'':capUnit[i]);     
        if(!((subChr == capNum[0]) && (ret=='')))     
            ret += subChr;     
    }     
    ret=(ret=='')? capNum[0]+capUnit[3]: ret;       
        
	if (num % 10000) {
		return ret + "圆整"; 
	}else {
		return ret + "整";
	}
}   
var dd = numToCny(100000);
//a标签防止选中
1.<a hidefocus="true" href="..."></a> //ie
2. a {
	outline : none;				//ff
}
//a标签取消浏览器默认行为
<a href="http://zhidao.baidu.com" onclick="return false">百度知道</a> //防止跳转
//去除绑定事件
dd.onclick = null;
//判断className是否已经有了
var clsArr = a1.className.split(" ");
for (var i = 0; i < clsArr.length; i += 1) {
	if (clsArr[i] !== "sb") {
		if (i === clsArr.length - 1) {
			a1.className += " sb";
		}
	}else {
		return false;
	}
}
//join,split
var a1.className = "asdoj  jasj fj oajs j";
var clsArr = a1.className.split(" ")
var str = clsArr.join(" ");
console.log(clsArr);
console.log(str);
console.log(a1.className);

//构造器模式
<input type="text" id="a1" />
<label id="a1label"></label><br/>
<input type="button" id="sub" value="click"/>
var ClientUtils = function() {};

ClientUtils.prototype.CheckName = function(id,placeId) {
	
	var target = document.getElementById(id);
	var place = document.getElementById(placeId);
	var len = target.value.length;
	var temp = 0; 
	
	if (len) {
		if (len < 5) {
			place.textContent = "x";
			place.innerText = "x";
			temp = 0; 
		}else if (len < 10) {
			place.textContent = "xx";
			place.innerText = "xx";
			temp = 1; 
		}else {
			place.textContent = "xxxx";
			place.innerText = "xxxx";
			temp = 0; 
		}
	}
	return temp;
};

var utils = new ClientUtils();
var sub = document.getElementById("sub");
sub.onclick = function() {
	utils.CheckName("a1", "a1label");
};



//观察者模式
<input type="text" id="a1" />
<label id="a1label"></label><br/>
<input type="button" id="sub" value="click"/>
var ClientUtils= {};

(function(utils) {
	
	utils.CheckName = function(id,placeId) {	
		var target = document.getElementById(id);
		var place = document.getElementById(placeId);
		var len = target.value.length;
		var temp = 0; 
		
		if (len) {
			if (len < 5) {
				place.textContent = "x";
				place.innerText = "x";
				temp = 0; 
			}else if (len < 10) {
				place.textContent = "xx";
				place.innerText = "xx";
				temp = 1; 
			}else {
				place.textContent = "xxxx";
				place.innerText = "xxxx";
				temp = 0; 
			}
		}
		return temp;
	};
} (ClientUtils));
sub.onclick = function() {
	ClientUtils.CheckName("a1", "a1label");
};


//className
function getElementsByClassName(className,tag){  
  //对tag进行过滤，取出所有对象，如取出所有input类型对象。  
  var allTags=document.getElementsByTagName(tag);  
  var matchingElements=new Array();  
	
  //正则表达式  
  className = className.replace(/\-/g,"\\-");  
  var regex = new RegExp("(^|\\s)" +className+ "(\\s|$)");  
	
  var element;  
	
	  //将取出的tag对象存入数组中。  
	  for(var i=0;i<allTags.length;i++){  
		  element =allTags[i];  
		  if(regex.test(element.className)){  
			  matchingElements.push(element);  
			  }  
	  }  
	return matchingElements;  
};  
